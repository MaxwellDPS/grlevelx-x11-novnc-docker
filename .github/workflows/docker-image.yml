name: Docker Image CI

on:
  push:
    branches:
      - "main"
    tags: "v[0-9]+.[0-9]+.[0-9]+"
    paths:
      - "Dockerfile"
      - "Dockerfile.wine"
      - supervisor/**
      - scripts/**
      - app/**
      - utils/**
  pull_request:
    branches:
      - "main"
    paths:
      - "Dockerfile"
      - "Dockerfile.wine"
      - supervisor/**
      - scripts/**
      - app/**
      - utils/**
  workflow_dispatch:
    inputs:
      new_tag:
        description: "Create and use this tag (e.g. v1.2.3). Leave blank to skip."
        required: false
        default: ""
      push_latest:
        description: Push latest tag
        required: false
        type: boolean
        default: false

# Ensure we can push tags
permissions:
  contents: write

###############################################################################
# Job 1: Build winebase
###############################################################################
jobs:
  build-winebase:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      ################################################################
      # Step 1: Optionally create a new Git tag if triggered manually
      ################################################################
      - name: Create git tag (when workflow_dispatch + new_tag)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.new_tag != '' }}
        run: |
          echo "Creating and pushing tag '${{ github.event.inputs.new_tag }}'..."
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ github.event.inputs.new_tag }}"
          git push origin "${{ github.event.inputs.new_tag }}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/winebase
            ghcr.io/${{ github.USER  }}/winebase
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=tag
            type=ref,event=tag,pattern=v*
            type=ref,event=tag,pattern=latest
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=short_sha
            type=branch


      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build & push winebase image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile.wine
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.taglist-winebase.outputs.tag_list }}

  ###############################################################################
  # Job 2: Build grlevelx (needs winebase)
  ###############################################################################
  build-grlevelx:
    runs-on: ubuntu-latest
    needs: build-winebase  # <-- This ensures grlevelx waits for winebase
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Generate Docker tag list (grlevelx)
        id: taglist-grlevelx
        run: |
          tag_list=""

          # Always include short commit
          tag_list+="${{ secrets.DOCKERHUB_USERNAME }}/grlevelx:${{ env.COMMIT_SHA_SHORT }}"

          # If we have a branch name, add it
          if [ -n "${{ env.BRANCH_NAME }}" ]; then
            tag_list+=$'\n'"${{ secrets.DOCKERHUB_USERNAME }}/grlevelx:${{ env.BRANCH_NAME }}"
          fi

          # If we have a semver/user tag, add it
          if [ -n "${{ env.DOCKER_IMAGE_TAG }}" ]; then
            tag_list+=$'\n'"${{ secrets.DOCKERHUB_USERNAME }}/grlevelx:${{ env.DOCKER_IMAGE_TAG }}"
          fi

          # Optionally include the "latest" tag
          if [[ "${{ env.PUSH_LATEST }}" == "true" ]]; then
            tag_list+=$'\n'"${{ secrets.DOCKERHUB_USERNAME }}/grlevelx:latest"
          fi

          echo "tag_list=$tag_list" >> $GITHUB_OUTPUT
          echo "::notice file=.github/workflows/docker-image.yml,line=151,endLine=151,title=Generated Docker tags for grlevelx::$tag_list"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/grlevelx
            ghcr.io/${{ github.USER  }}/grlevelx
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=tag
            type=ref,event=tag,pattern=v*
            type=ref,event=tag,pattern=latest
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=short_sha
            type=branch

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build & push grlevelx image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          build-args: WINE_TAG=${{ env.COMMIT_SHA_SHORT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
         labels: ${{ steps.meta.outputs.labels }}
